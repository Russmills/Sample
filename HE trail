---
title: "Untitled"
author: "Jiyi Jiang"
date: "July 14, 2015"
output: html_document
---

# Histogram equalization(background & noise &darken)
```{r}
library(IM)

unflatten <- function(arr784) {
    return(matrix(arr784, nrow=28)[,28:1])
}

flatten <- function(mat28x28) {
    return(as.vector(mat28x28[,28:1]))
}
Q <-matrix(0, nrow=6000, ncol=784)


for (i in 1:6000){
                digit_flat <- train$x[i+24000,]

# check that unflatten and flatten are inverse functions
# digit_flat2 <- flatten(unflatten(digit_flat))
# sum(digit_flat - digit_flat2)
# show_digit(digit_flat)
# show_digit(digit_flat2)

digit_unflat <- unflatten(digit_flat)
digit_histeq <- histeq( digit_unflat )
digit_histeq_modified <- flatten(digit_histeq)

#digit_histeq_modified [ which(digit_histeq_modified  == min(digit_histeq_modified )) ] <- 0

          
          Average <- sum(digit_histeq_modified)/784
          b <- digit_histeq_modified < Average
          digit_histeq_modified[b] <- 0
          c <- digit_histeq_modified > Average
          digit_histeq_modified[c] <- max(digit_histeq_modified )
          Q[i,] <- digit_histeq_modified

Q[i,] <- digit_histeq_modified

                }



#show_digit(digit_flat)

show_digit(  digit_histeq_modified )
```

# Histogram equalization(background & noise)
```{r}
library(IM)

unflatten <- function(arr784) {
    return(matrix(arr784, nrow=28)[,28:1])
}

flatten <- function(mat28x28) {
    return(as.vector(mat28x28[,28:1]))
}
Q <-matrix(0, nrow=6000, ncol=784)

for (i in 222:222){
                digit_flat <- train$x[i,]

# check that unflatten and flatten are inverse functions
# digit_flat2 <- flatten(unflatten(digit_flat))
# sum(digit_flat - digit_flat2)
# show_digit(digit_flat)
# show_digit(digit_flat2)

digit_unflat <- unflatten(digit_flat)
digit_histeq <- histeq( digit_unflat )
digit_histeq_modified <- flatten(digit_histeq)

#digit_histeq_modified [ which(digit_histeq_modified  == min(digit_histeq_modified )) ] <- 0

          
          Average <- sum(digit_histeq_modified)/784
          b <- digit_histeq_modified < Average
          digit_histeq_modified[b] <- 0
          c <- digit_histeq_modified >Average
          Q[i,] <- digit_histeq_modified

Q[i,] <- digit_histeq_modified

                }



#show_digit(digit_flat)

show_digit(  digit_histeq_modified )
```

# Histogram equalization(treshold backgroud)
```{r}
library(IM)

unflatten <- function(arr784) {
    return(matrix(arr784, nrow=28)[,28:1])
}

flatten <- function(mat28x28) {
    return(as.vector(mat28x28[,28:1]))
}
Q <-matrix(0, nrow=6000, ncol=784)

for (i in 222:222){
                digit_flat <- train$x[i,]

# check that unflatten and flatten are inverse functions
# digit_flat2 <- flatten(unflatten(digit_flat))
# sum(digit_flat - digit_flat2)
# show_digit(digit_flat)
# show_digit(digit_flat2)

digit_unflat <- unflatten(digit_flat)
digit_histeq <- histeq( digit_unflat )
digit_histeq_modified <- flatten(digit_histeq)

digit_histeq_modified [ which(digit_histeq_modified  == min(digit_histeq_modified )) ] <- 0

          
          #Average <- sum(digit_histeq_modified)/784
          #b <- digit_histeq_modified < Average
          #digit_histeq_modified[b] <- 0
          #Q[i,] <- digit_histeq_modified

Q[i,] <- digit_histeq_modified

                }



#show_digit(digit_flat)

show_digit(  digit_histeq_modified )
```
